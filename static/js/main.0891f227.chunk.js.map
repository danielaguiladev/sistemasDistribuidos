{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","bodyBlack","backgroundColor","height","bodyWhite","root","padding","display","width","margin","input","marginLeft","flex","iconButton","divider","thanos","position","right","bottom","app","fontSize","transition","app_no_margin","App","_useState","useState","_useState2","Object","slicedToArray","snap","setSnap","classes","react_default","a","createElement","className","Paper","InputBase","placeholder","Divider","IconButton","color","aria-label","Search_default","index_es","onSnap","console","log","onSnapReverse","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4SAUMA,EAAYC,YAAW,CAC3BC,UAAW,CACTC,gBAAiB,OACjBC,OAAQ,SAEVC,UAAW,CACTF,gBAAiB,QAEnBG,KAAM,CACJC,QAAS,UACTC,QAAS,OACTC,MAAO,IACPC,OAAQ,UAEVC,MAAO,CACLC,WAAY,EACZC,KAAM,GAERC,WAAY,CACVP,QAAS,IAEXQ,QAAS,CACPN,MAAO,EACPL,OAAQ,GACRM,OAAQ,GAEVM,OAAQ,CACNC,SAAU,QACVC,MAAO,GACPC,OAAQ,GAEVC,IAAK,CACHV,OAAQ,cACRW,SAAU,GACVC,WAAY,YAEdC,cAAe,KAkCFC,MA9Bf,WAAe,IAAAC,EACWC,mBAAS,MADpBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACAI,EADAJ,EAAA,GAEPK,EAAUhC,IAIjB,OACCiC,EAAAC,EAAAC,cAAA,OAAKC,UAAWN,EAAOE,EAAQ9B,UAAY8B,EAAQ3B,WAC/C4B,EAAAC,EAAAC,cAAA,OAAKC,UAAWN,EAAOE,EAAQT,cAAgBS,EAAQZ,MAEhDU,GACCG,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOD,UAAWJ,EAAQ1B,MACxB2B,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAWF,UAAWJ,EAAQrB,MAAO4B,YAAY,gBACjDN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAASJ,UAAWJ,EAAQjB,UAC5BkB,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAYC,MAAM,UAAUN,UAAWJ,EAAQlB,WAAY6B,aAAW,cACpEV,EAAAC,EAAAC,cAACS,EAAAV,EAAD,QAIVD,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAQhB,QACtBiB,EAAAC,EAAAC,cAACU,EAAA,EAAD,CACEC,OAAQ,WAAOf,GAAQ,GAjB/BgB,QAAQC,IAAI,WAkBJC,cAAe,kBAAMlB,GAAQ,UC5DrBmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0891f227.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport Thanos from \"react-thanos\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport SearchIcon from '@material-ui/icons/Search';\n\nconst useStyles = makeStyles({\n  bodyBlack: {\n    backgroundColor: '#000',\n    height: '100vh'\n  },\n  bodyWhite: {\n    backgroundColor: '#fff',\n  },\n  root: {\n    padding: '2px 4px',\n    display: 'flex',\n    width: 400,\n    margin: '0 auto',\n  },\n  input: {\n    marginLeft: 8,\n    flex: 1,\n  },\n  iconButton: {\n    padding: 10,\n  },\n  divider: {\n    width: 1,\n    height: 28,\n    margin: 4,\n  },\n  thanos: {\n    position: 'fixed',\n    right: 10,\n    bottom: 5,\n  },\n  app: {\n    margin: '40vh auto 0',\n    fontSize: 18,\n    transition: 'all .55s'\n  },\n  app_no_margin: {\n  }\n});\n\nfunction App() {\n  const [snap, setSnap] = useState(null);\n  const classes = useStyles();\n  function busca() {\n    console.log(\"BUSCA!\");\n  };\n\treturn (\n\t\t<div className={snap ? classes.bodyBlack : classes.bodyWhite}>\n      <div className={snap ? classes.app_no_margin : classes.app}>\n          {\n            !snap &&\n              <Paper className={classes.root}>\n                <InputBase className={classes.input} placeholder=\"Busque aqui\" />\n                <Divider className={classes.divider} />\n                <IconButton color=\"primary\" className={classes.iconButton} aria-label=\"Directions\">\n                  <SearchIcon />\n                </IconButton>\n              </Paper>\n          }\n        <div className={classes.thanos}>\n          <Thanos\n            onSnap={() => {setSnap(true); busca()}}\n            onSnapReverse={() => setSnap(false)}\n          />\n        </div>\n      </div>\n    </div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}